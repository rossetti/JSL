/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jslx.dbutilities.jsldbsrc.JslDb;
import jslx.dbutilities.jsldbsrc.Keys;
import jslx.dbutilities.jsldbsrc.tables.records.SimulationRunRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SimulationRun extends TableImpl<SimulationRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JSL_DB.SIMULATION_RUN</code>
     */
    public static final SimulationRun SIMULATION_RUN = new SimulationRun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SimulationRunRecord> getRecordType() {
        return SimulationRunRecord.class;
    }

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.ID</code>.
     */
    public final TableField<SimulationRunRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.SIM_NAME</code>.
     */
    public final TableField<SimulationRunRecord, String> SIM_NAME = createField(DSL.name("SIM_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.MODEL_NAME</code>.
     */
    public final TableField<SimulationRunRecord, String> MODEL_NAME = createField(DSL.name("MODEL_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.EXP_NAME</code>.
     */
    public final TableField<SimulationRunRecord, String> EXP_NAME = createField(DSL.name("EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.EXP_START_TIME_STAMP</code>.
     */
    public final TableField<SimulationRunRecord, LocalDateTime> EXP_START_TIME_STAMP = createField(DSL.name("EXP_START_TIME_STAMP"), SQLDataType.LOCALDATETIME(9), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.EXP_END_TIME_STAMP</code>.
     */
    public final TableField<SimulationRunRecord, LocalDateTime> EXP_END_TIME_STAMP = createField(DSL.name("EXP_END_TIME_STAMP"), SQLDataType.LOCALDATETIME(9), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.NUM_REPS</code>.
     */
    public final TableField<SimulationRunRecord, Integer> NUM_REPS = createField(DSL.name("NUM_REPS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.LAST_REP</code>.
     */
    public final TableField<SimulationRunRecord, Integer> LAST_REP = createField(DSL.name("LAST_REP"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.LENGTH_OF_REP</code>.
     */
    public final TableField<SimulationRunRecord, Double> LENGTH_OF_REP = createField(DSL.name("LENGTH_OF_REP"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.LENGTH_OF_WARM_UP</code>.
     */
    public final TableField<SimulationRunRecord, Double> LENGTH_OF_WARM_UP = createField(DSL.name("LENGTH_OF_WARM_UP"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.HAS_MORE_REPS</code>.
     */
    public final TableField<SimulationRunRecord, Boolean> HAS_MORE_REPS = createField(DSL.name("HAS_MORE_REPS"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.REP_ALLOWED_EXEC_TIME</code>.
     */
    public final TableField<SimulationRunRecord, Long> REP_ALLOWED_EXEC_TIME = createField(DSL.name("REP_ALLOWED_EXEC_TIME"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.REP_INIT_OPTION</code>.
     */
    public final TableField<SimulationRunRecord, Boolean> REP_INIT_OPTION = createField(DSL.name("REP_INIT_OPTION"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.RESET_START_STREAM_OPTION</code>.
     */
    public final TableField<SimulationRunRecord, Boolean> RESET_START_STREAM_OPTION = createField(DSL.name("RESET_START_STREAM_OPTION"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.ANTITHETIC_OPTION</code>.
     */
    public final TableField<SimulationRunRecord, Boolean> ANTITHETIC_OPTION = createField(DSL.name("ANTITHETIC_OPTION"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.ADV_NEXT_SUB_STREAM_OPTION</code>.
     */
    public final TableField<SimulationRunRecord, Boolean> ADV_NEXT_SUB_STREAM_OPTION = createField(DSL.name("ADV_NEXT_SUB_STREAM_OPTION"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>JSL_DB.SIMULATION_RUN.NUM_STREAM_ADVANCES</code>.
     */
    public final TableField<SimulationRunRecord, Integer> NUM_STREAM_ADVANCES = createField(DSL.name("NUM_STREAM_ADVANCES"), SQLDataType.INTEGER, this, "");

    private SimulationRun(Name alias, Table<SimulationRunRecord> aliased) {
        this(alias, aliased, null);
    }

    private SimulationRun(Name alias, Table<SimulationRunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>JSL_DB.SIMULATION_RUN</code> table reference
     */
    public SimulationRun(String alias) {
        this(DSL.name(alias), SIMULATION_RUN);
    }

    /**
     * Create an aliased <code>JSL_DB.SIMULATION_RUN</code> table reference
     */
    public SimulationRun(Name alias) {
        this(alias, SIMULATION_RUN);
    }

    /**
     * Create a <code>JSL_DB.SIMULATION_RUN</code> table reference
     */
    public SimulationRun() {
        this(DSL.name("SIMULATION_RUN"), null);
    }

    public <O extends Record> SimulationRun(Table<O> child, ForeignKey<O, SimulationRunRecord> key) {
        super(child, key, SIMULATION_RUN);
    }

    @Override
    public Schema getSchema() {
        return JslDb.JSL_DB;
    }

    @Override
    public Identity<SimulationRunRecord, Integer> getIdentity() {
        return (Identity<SimulationRunRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SimulationRunRecord> getPrimaryKey() {
        return Keys.SQL0000000081_7FA040FF_0179_91C9_A2FA_00000F317028;
    }

    @Override
    public List<UniqueKey<SimulationRunRecord>> getKeys() {
        return Arrays.<UniqueKey<SimulationRunRecord>>asList(Keys.SQL0000000081_7FA040FF_0179_91C9_A2FA_00000F317028, Keys.SR_NAME_EXP_UNIQUE);
    }

    @Override
    public List<Check<SimulationRunRecord>> getChecks() {
        return Arrays.<Check<SimulationRunRecord>>asList(
              Internal.createCheck(this, DSL.name("SQL0000000082-97e00100-0179-91c9-a2fa-00000f317028"), "(NUM_REPS >=1)", true)
        );
    }

    @Override
    public SimulationRun as(String alias) {
        return new SimulationRun(DSL.name(alias), this);
    }

    @Override
    public SimulationRun as(Name alias) {
        return new SimulationRun(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SimulationRun rename(String name) {
        return new SimulationRun(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SimulationRun rename(Name name) {
        return new SimulationRun(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, String, String, LocalDateTime, LocalDateTime, Integer, Integer, Double, Double, Boolean, Long, Boolean, Boolean, Boolean, Boolean, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
