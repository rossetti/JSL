/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables;


import java.util.Arrays;
import java.util.List;

import jslx.dbutilities.jsldbsrc.JslDb;
import jslx.dbutilities.jsldbsrc.Keys;
import jslx.dbutilities.jsldbsrc.tables.records.ModelElementRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelElement extends TableImpl<ModelElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JSL_DB.MODEL_ELEMENT</code>
     */
    public static final ModelElement MODEL_ELEMENT = new ModelElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelElementRecord> getRecordType() {
        return ModelElementRecord.class;
    }

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.SIM_RUN_ID_FK</code>.
     */
    public final TableField<ModelElementRecord, Integer> SIM_RUN_ID_FK = createField(DSL.name("SIM_RUN_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.ELEMENT_ID</code>.
     */
    public final TableField<ModelElementRecord, Integer> ELEMENT_ID = createField(DSL.name("ELEMENT_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.ELEMENT_NAME</code>.
     */
    public final TableField<ModelElementRecord, String> ELEMENT_NAME = createField(DSL.name("ELEMENT_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.CLASS_NAME</code>.
     */
    public final TableField<ModelElementRecord, String> CLASS_NAME = createField(DSL.name("CLASS_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.PARENT_ID_FK</code>.
     */
    public final TableField<ModelElementRecord, Integer> PARENT_ID_FK = createField(DSL.name("PARENT_ID_FK"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.PARENT_NAME</code>.
     */
    public final TableField<ModelElementRecord, String> PARENT_NAME = createField(DSL.name("PARENT_NAME"), SQLDataType.VARCHAR(510), this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.LEFT_COUNT</code>.
     */
    public final TableField<ModelElementRecord, Integer> LEFT_COUNT = createField(DSL.name("LEFT_COUNT"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.MODEL_ELEMENT.RIGHT_COUNT</code>.
     */
    public final TableField<ModelElementRecord, Integer> RIGHT_COUNT = createField(DSL.name("RIGHT_COUNT"), SQLDataType.INTEGER.nullable(false), this, "");

    private ModelElement(Name alias, Table<ModelElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelElement(Name alias, Table<ModelElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>JSL_DB.MODEL_ELEMENT</code> table reference
     */
    public ModelElement(String alias) {
        this(DSL.name(alias), MODEL_ELEMENT);
    }

    /**
     * Create an aliased <code>JSL_DB.MODEL_ELEMENT</code> table reference
     */
    public ModelElement(Name alias) {
        this(alias, MODEL_ELEMENT);
    }

    /**
     * Create a <code>JSL_DB.MODEL_ELEMENT</code> table reference
     */
    public ModelElement() {
        this(DSL.name("MODEL_ELEMENT"), null);
    }

    public <O extends Record> ModelElement(Table<O> child, ForeignKey<O, ModelElementRecord> key) {
        super(child, key, MODEL_ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return JslDb.JSL_DB;
    }

    @Override
    public UniqueKey<ModelElementRecord> getPrimaryKey() {
        return Keys.ME_PRIM_KY;
    }

    @Override
    public List<UniqueKey<ModelElementRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelElementRecord>>asList(Keys.ME_PRIM_KY, Keys.ME_NAME_UNIQUE);
    }

    @Override
    public List<ForeignKey<ModelElementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelElementRecord, ?>>asList(Keys.ME_SIMRUN_FK);
    }

    private transient SimulationRun _simulationRun;

    public SimulationRun simulationRun() {
        if (_simulationRun == null)
            _simulationRun = new SimulationRun(this, Keys.ME_SIMRUN_FK);

        return _simulationRun;
    }

    @Override
    public List<Check<ModelElementRecord>> getChecks() {
        return Arrays.<Check<ModelElementRecord>>asList(
              Internal.createCheck(this, DSL.name("SQL0000000084-cb76c10e-0179-91c9-a2fa-00000f317028"), "(LEFT_COUNT > 0)", true)
            , Internal.createCheck(this, DSL.name("SQL0000000085-83ba410f-0179-91c9-a2fa-00000f317028"), "(RIGHT_COUNT > 1)", true)
            , Internal.createCheck(this, DSL.name("TRAVERSAL_ORDER_OKAY"), "(LEFT_COUNT < RIGHT_COUNT)", true)
        );
    }

    @Override
    public ModelElement as(String alias) {
        return new ModelElement(DSL.name(alias), this);
    }

    @Override
    public ModelElement as(Name alias) {
        return new ModelElement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelElement rename(String name) {
        return new ModelElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelElement rename(Name name) {
        return new ModelElement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, Integer, String, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
