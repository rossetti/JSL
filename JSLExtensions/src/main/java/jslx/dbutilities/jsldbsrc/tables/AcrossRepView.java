/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables;


import jslx.dbutilities.jsldbsrc.JslDb;
import jslx.dbutilities.jsldbsrc.tables.records.AcrossRepViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcrossRepView extends TableImpl<AcrossRepViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JSL_DB.ACROSS_REP_VIEW</code>
     */
    public static final AcrossRepView ACROSS_REP_VIEW = new AcrossRepView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AcrossRepViewRecord> getRecordType() {
        return AcrossRepViewRecord.class;
    }

    /**
     * The column <code>JSL_DB.ACROSS_REP_VIEW.SIM_RUN_ID_FK</code>.
     */
    public final TableField<AcrossRepViewRecord, Integer> SIM_RUN_ID_FK = createField(DSL.name("SIM_RUN_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.ACROSS_REP_VIEW.EXP_NAME</code>.
     */
    public final TableField<AcrossRepViewRecord, String> EXP_NAME = createField(DSL.name("EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.ACROSS_REP_VIEW.STAT_NAME</code>.
     */
    public final TableField<AcrossRepViewRecord, String> STAT_NAME = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "");

    /**
     * The column <code>JSL_DB.ACROSS_REP_VIEW.STAT_COUNT</code>.
     */
    public final TableField<AcrossRepViewRecord, Double> STAT_COUNT = createField(DSL.name("STAT_COUNT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.ACROSS_REP_VIEW.AVERAGE</code>.
     */
    public final TableField<AcrossRepViewRecord, Double> AVERAGE = createField(DSL.name("AVERAGE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.ACROSS_REP_VIEW.STD_DEV</code>.
     */
    public final TableField<AcrossRepViewRecord, Double> STD_DEV = createField(DSL.name("STD_DEV"), SQLDataType.DOUBLE, this, "");

    private AcrossRepView(Name alias, Table<AcrossRepViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private AcrossRepView(Name alias, Table<AcrossRepViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("CREATE VIEW JSL_DB.ACROSS_REP_VIEW (SIM_RUN_ID_FK, EXP_NAME, STAT_NAME, STAT_COUNT, AVERAGE, STD_DEV) AS (SELECT JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK, EXP_NAME, STAT_NAME, STAT_COUNT, AVERAGE, STD_DEV FROM JSL_DB.SIMULATION_RUN, JSL_DB.ACROSS_REP_STAT, JSL_DB.MODEL_ELEMENT WHERE JSL_DB.SIMULATION_RUN.ID = JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK AND JSL_DB.SIMULATION_RUN.ID = JSL_DB.MODEL_ELEMENT.SIM_RUN_ID_FK AND JSL_DB.MODEL_ELEMENT.ELEMENT_ID = JSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK AND JSL_DB.MODEL_ELEMENT.ELEMENT_NAME = JSL_DB.ACROSS_REP_STAT.STAT_NAME ORDER BY STAT_NAME,JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK, EXP_NAME)"));
    }

    /**
     * Create an aliased <code>JSL_DB.ACROSS_REP_VIEW</code> table reference
     */
    public AcrossRepView(String alias) {
        this(DSL.name(alias), ACROSS_REP_VIEW);
    }

    /**
     * Create an aliased <code>JSL_DB.ACROSS_REP_VIEW</code> table reference
     */
    public AcrossRepView(Name alias) {
        this(alias, ACROSS_REP_VIEW);
    }

    /**
     * Create a <code>JSL_DB.ACROSS_REP_VIEW</code> table reference
     */
    public AcrossRepView() {
        this(DSL.name("ACROSS_REP_VIEW"), null);
    }

    public <O extends Record> AcrossRepView(Table<O> child, ForeignKey<O, AcrossRepViewRecord> key) {
        super(child, key, ACROSS_REP_VIEW);
    }

    @Override
    public Schema getSchema() {
        return JslDb.JSL_DB;
    }

    @Override
    public AcrossRepView as(String alias) {
        return new AcrossRepView(DSL.name(alias), this);
    }

    @Override
    public AcrossRepView as(Name alias) {
        return new AcrossRepView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AcrossRepView rename(String name) {
        return new AcrossRepView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AcrossRepView rename(Name name) {
        return new AcrossRepView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Double, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
