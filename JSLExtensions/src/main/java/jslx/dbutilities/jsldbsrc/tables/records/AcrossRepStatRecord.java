/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables.records;


import jslx.dbutilities.jsldbsrc.tables.AcrossRepStat;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record21;
import org.jooq.Row21;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcrossRepStatRecord extends UpdatableRecordImpl<AcrossRepStatRecord> implements Record21<Integer, Integer, Integer, String, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK</code>.
     */
    public void setElementIdFk(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK</code>.
     */
    public Integer getElementIdFk() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK</code>.
     */
    public void setSimRunIdFk(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK</code>.
     */
    public Integer getSimRunIdFk() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STAT_NAME</code>.
     */
    public void setStatName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STAT_NAME</code>.
     */
    public String getStatName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STAT_COUNT</code>.
     */
    public void setStatCount(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STAT_COUNT</code>.
     */
    public Double getStatCount() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.AVERAGE</code>.
     */
    public void setAverage(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.AVERAGE</code>.
     */
    public Double getAverage() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STD_DEV</code>.
     */
    public void setStdDev(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STD_DEV</code>.
     */
    public Double getStdDev() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STD_ERR</code>.
     */
    public void setStdErr(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STD_ERR</code>.
     */
    public Double getStdErr() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.HALF_WIDTH</code>.
     */
    public void setHalfWidth(Double value) {
        set(8, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.HALF_WIDTH</code>.
     */
    public Double getHalfWidth() {
        return (Double) get(8);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.CONF_LEVEL</code>.
     */
    public void setConfLevel(Double value) {
        set(9, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.CONF_LEVEL</code>.
     */
    public Double getConfLevel() {
        return (Double) get(9);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.MINIMUM</code>.
     */
    public void setMinimum(Double value) {
        set(10, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.MINIMUM</code>.
     */
    public Double getMinimum() {
        return (Double) get(10);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.MAXIMUM</code>.
     */
    public void setMaximum(Double value) {
        set(11, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.MAXIMUM</code>.
     */
    public Double getMaximum() {
        return (Double) get(11);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.SUM_OF_OBS</code>.
     */
    public void setSumOfObs(Double value) {
        set(12, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.SUM_OF_OBS</code>.
     */
    public Double getSumOfObs() {
        return (Double) get(12);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.DEV_SSQ</code>.
     */
    public void setDevSsq(Double value) {
        set(13, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.DEV_SSQ</code>.
     */
    public Double getDevSsq() {
        return (Double) get(13);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAST_VALUE</code>.
     */
    public void setLastValue(Double value) {
        set(14, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAST_VALUE</code>.
     */
    public Double getLastValue() {
        return (Double) get(14);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.KURTOSIS</code>.
     */
    public void setKurtosis(Double value) {
        set(15, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.KURTOSIS</code>.
     */
    public Double getKurtosis() {
        return (Double) get(15);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.SKEWNESS</code>.
     */
    public void setSkewness(Double value) {
        set(16, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.SKEWNESS</code>.
     */
    public Double getSkewness() {
        return (Double) get(16);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_COV</code>.
     */
    public void setLag1Cov(Double value) {
        set(17, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_COV</code>.
     */
    public Double getLag1Cov() {
        return (Double) get(17);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_CORR</code>.
     */
    public void setLag1Corr(Double value) {
        set(18, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_CORR</code>.
     */
    public Double getLag1Corr() {
        return (Double) get(18);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.VON_NEUMAN_LAG1_STAT</code>.
     */
    public void setVonNeumanLag1Stat(Double value) {
        set(19, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.VON_NEUMAN_LAG1_STAT</code>.
     */
    public Double getVonNeumanLag1Stat() {
        return (Double) get(19);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.NUM_MISSING_OBS</code>.
     */
    public void setNumMissingObs(Double value) {
        set(20, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.NUM_MISSING_OBS</code>.
     */
    public Double getNumMissingObs() {
        return (Double) get(20);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record21 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row21<Integer, Integer, Integer, String, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    @Override
    public Row21<Integer, Integer, Integer, String, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> valuesRow() {
        return (Row21) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AcrossRepStat.ACROSS_REP_STAT.ID;
    }

    @Override
    public Field<Integer> field2() {
        return AcrossRepStat.ACROSS_REP_STAT.ELEMENT_ID_FK;
    }

    @Override
    public Field<Integer> field3() {
        return AcrossRepStat.ACROSS_REP_STAT.SIM_RUN_ID_FK;
    }

    @Override
    public Field<String> field4() {
        return AcrossRepStat.ACROSS_REP_STAT.STAT_NAME;
    }

    @Override
    public Field<Double> field5() {
        return AcrossRepStat.ACROSS_REP_STAT.STAT_COUNT;
    }

    @Override
    public Field<Double> field6() {
        return AcrossRepStat.ACROSS_REP_STAT.AVERAGE;
    }

    @Override
    public Field<Double> field7() {
        return AcrossRepStat.ACROSS_REP_STAT.STD_DEV;
    }

    @Override
    public Field<Double> field8() {
        return AcrossRepStat.ACROSS_REP_STAT.STD_ERR;
    }

    @Override
    public Field<Double> field9() {
        return AcrossRepStat.ACROSS_REP_STAT.HALF_WIDTH;
    }

    @Override
    public Field<Double> field10() {
        return AcrossRepStat.ACROSS_REP_STAT.CONF_LEVEL;
    }

    @Override
    public Field<Double> field11() {
        return AcrossRepStat.ACROSS_REP_STAT.MINIMUM;
    }

    @Override
    public Field<Double> field12() {
        return AcrossRepStat.ACROSS_REP_STAT.MAXIMUM;
    }

    @Override
    public Field<Double> field13() {
        return AcrossRepStat.ACROSS_REP_STAT.SUM_OF_OBS;
    }

    @Override
    public Field<Double> field14() {
        return AcrossRepStat.ACROSS_REP_STAT.DEV_SSQ;
    }

    @Override
    public Field<Double> field15() {
        return AcrossRepStat.ACROSS_REP_STAT.LAST_VALUE;
    }

    @Override
    public Field<Double> field16() {
        return AcrossRepStat.ACROSS_REP_STAT.KURTOSIS;
    }

    @Override
    public Field<Double> field17() {
        return AcrossRepStat.ACROSS_REP_STAT.SKEWNESS;
    }

    @Override
    public Field<Double> field18() {
        return AcrossRepStat.ACROSS_REP_STAT.LAG1_COV;
    }

    @Override
    public Field<Double> field19() {
        return AcrossRepStat.ACROSS_REP_STAT.LAG1_CORR;
    }

    @Override
    public Field<Double> field20() {
        return AcrossRepStat.ACROSS_REP_STAT.VON_NEUMAN_LAG1_STAT;
    }

    @Override
    public Field<Double> field21() {
        return AcrossRepStat.ACROSS_REP_STAT.NUM_MISSING_OBS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getElementIdFk();
    }

    @Override
    public Integer component3() {
        return getSimRunIdFk();
    }

    @Override
    public String component4() {
        return getStatName();
    }

    @Override
    public Double component5() {
        return getStatCount();
    }

    @Override
    public Double component6() {
        return getAverage();
    }

    @Override
    public Double component7() {
        return getStdDev();
    }

    @Override
    public Double component8() {
        return getStdErr();
    }

    @Override
    public Double component9() {
        return getHalfWidth();
    }

    @Override
    public Double component10() {
        return getConfLevel();
    }

    @Override
    public Double component11() {
        return getMinimum();
    }

    @Override
    public Double component12() {
        return getMaximum();
    }

    @Override
    public Double component13() {
        return getSumOfObs();
    }

    @Override
    public Double component14() {
        return getDevSsq();
    }

    @Override
    public Double component15() {
        return getLastValue();
    }

    @Override
    public Double component16() {
        return getKurtosis();
    }

    @Override
    public Double component17() {
        return getSkewness();
    }

    @Override
    public Double component18() {
        return getLag1Cov();
    }

    @Override
    public Double component19() {
        return getLag1Corr();
    }

    @Override
    public Double component20() {
        return getVonNeumanLag1Stat();
    }

    @Override
    public Double component21() {
        return getNumMissingObs();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getElementIdFk();
    }

    @Override
    public Integer value3() {
        return getSimRunIdFk();
    }

    @Override
    public String value4() {
        return getStatName();
    }

    @Override
    public Double value5() {
        return getStatCount();
    }

    @Override
    public Double value6() {
        return getAverage();
    }

    @Override
    public Double value7() {
        return getStdDev();
    }

    @Override
    public Double value8() {
        return getStdErr();
    }

    @Override
    public Double value9() {
        return getHalfWidth();
    }

    @Override
    public Double value10() {
        return getConfLevel();
    }

    @Override
    public Double value11() {
        return getMinimum();
    }

    @Override
    public Double value12() {
        return getMaximum();
    }

    @Override
    public Double value13() {
        return getSumOfObs();
    }

    @Override
    public Double value14() {
        return getDevSsq();
    }

    @Override
    public Double value15() {
        return getLastValue();
    }

    @Override
    public Double value16() {
        return getKurtosis();
    }

    @Override
    public Double value17() {
        return getSkewness();
    }

    @Override
    public Double value18() {
        return getLag1Cov();
    }

    @Override
    public Double value19() {
        return getLag1Corr();
    }

    @Override
    public Double value20() {
        return getVonNeumanLag1Stat();
    }

    @Override
    public Double value21() {
        return getNumMissingObs();
    }

    @Override
    public AcrossRepStatRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value2(Integer value) {
        setElementIdFk(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value3(Integer value) {
        setSimRunIdFk(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value4(String value) {
        setStatName(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value5(Double value) {
        setStatCount(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value6(Double value) {
        setAverage(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value7(Double value) {
        setStdDev(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value8(Double value) {
        setStdErr(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value9(Double value) {
        setHalfWidth(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value10(Double value) {
        setConfLevel(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value11(Double value) {
        setMinimum(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value12(Double value) {
        setMaximum(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value13(Double value) {
        setSumOfObs(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value14(Double value) {
        setDevSsq(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value15(Double value) {
        setLastValue(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value16(Double value) {
        setKurtosis(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value17(Double value) {
        setSkewness(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value18(Double value) {
        setLag1Cov(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value19(Double value) {
        setLag1Corr(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value20(Double value) {
        setVonNeumanLag1Stat(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord value21(Double value) {
        setNumMissingObs(value);
        return this;
    }

    @Override
    public AcrossRepStatRecord values(Integer value1, Integer value2, Integer value3, String value4, Double value5, Double value6, Double value7, Double value8, Double value9, Double value10, Double value11, Double value12, Double value13, Double value14, Double value15, Double value16, Double value17, Double value18, Double value19, Double value20, Double value21) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AcrossRepStatRecord
     */
    public AcrossRepStatRecord() {
        super(AcrossRepStat.ACROSS_REP_STAT);
    }

    /**
     * Create a detached, initialised AcrossRepStatRecord
     */
    public AcrossRepStatRecord(Integer id, Integer elementIdFk, Integer simRunIdFk, String statName, Double statCount, Double average, Double stdDev, Double stdErr, Double halfWidth, Double confLevel, Double minimum, Double maximum, Double sumOfObs, Double devSsq, Double lastValue, Double kurtosis, Double skewness, Double lag1Cov, Double lag1Corr, Double vonNeumanLag1Stat, Double numMissingObs) {
        super(AcrossRepStat.ACROSS_REP_STAT);

        setId(id);
        setElementIdFk(elementIdFk);
        setSimRunIdFk(simRunIdFk);
        setStatName(statName);
        setStatCount(statCount);
        setAverage(average);
        setStdDev(stdDev);
        setStdErr(stdErr);
        setHalfWidth(halfWidth);
        setConfLevel(confLevel);
        setMinimum(minimum);
        setMaximum(maximum);
        setSumOfObs(sumOfObs);
        setDevSsq(devSsq);
        setLastValue(lastValue);
        setKurtosis(kurtosis);
        setSkewness(skewness);
        setLag1Cov(lag1Cov);
        setLag1Corr(lag1Corr);
        setVonNeumanLag1Stat(vonNeumanLag1Stat);
        setNumMissingObs(numMissingObs);
    }
}
