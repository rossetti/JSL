/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables;


import java.util.Arrays;
import java.util.List;

import jslx.dbutilities.jsldbsrc.JslDb;
import jslx.dbutilities.jsldbsrc.Keys;
import jslx.dbutilities.jsldbsrc.tables.records.WithinRepStatRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WithinRepStat extends TableImpl<WithinRepStatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JSL_DB.WITHIN_REP_STAT</code>
     */
    public static final WithinRepStat WITHIN_REP_STAT = new WithinRepStat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WithinRepStatRecord> getRecordType() {
        return WithinRepStatRecord.class;
    }

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.ID</code>.
     */
    public final TableField<WithinRepStatRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.ELEMENT_ID_FK</code>.
     */
    public final TableField<WithinRepStatRecord, Integer> ELEMENT_ID_FK = createField(DSL.name("ELEMENT_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK</code>.
     */
    public final TableField<WithinRepStatRecord, Integer> SIM_RUN_ID_FK = createField(DSL.name("SIM_RUN_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.REP_NUM</code>.
     */
    public final TableField<WithinRepStatRecord, Integer> REP_NUM = createField(DSL.name("REP_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.STAT_NAME</code>.
     */
    public final TableField<WithinRepStatRecord, String> STAT_NAME = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.STAT_COUNT</code>.
     */
    public final TableField<WithinRepStatRecord, Double> STAT_COUNT = createField(DSL.name("STAT_COUNT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.AVERAGE</code>.
     */
    public final TableField<WithinRepStatRecord, Double> AVERAGE = createField(DSL.name("AVERAGE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.MINIMUM</code>.
     */
    public final TableField<WithinRepStatRecord, Double> MINIMUM = createField(DSL.name("MINIMUM"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.MAXIMUM</code>.
     */
    public final TableField<WithinRepStatRecord, Double> MAXIMUM = createField(DSL.name("MAXIMUM"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.WEIGHTED_SUM</code>.
     */
    public final TableField<WithinRepStatRecord, Double> WEIGHTED_SUM = createField(DSL.name("WEIGHTED_SUM"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.SUM_OF_WEIGHTS</code>.
     */
    public final TableField<WithinRepStatRecord, Double> SUM_OF_WEIGHTS = createField(DSL.name("SUM_OF_WEIGHTS"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.WEIGHTED_SSQ</code>.
     */
    public final TableField<WithinRepStatRecord, Double> WEIGHTED_SSQ = createField(DSL.name("WEIGHTED_SSQ"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.LAST_VALUE</code>.
     */
    public final TableField<WithinRepStatRecord, Double> LAST_VALUE = createField(DSL.name("LAST_VALUE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.WITHIN_REP_STAT.LAST_WEIGHT</code>.
     */
    public final TableField<WithinRepStatRecord, Double> LAST_WEIGHT = createField(DSL.name("LAST_WEIGHT"), SQLDataType.DOUBLE, this, "");

    private WithinRepStat(Name alias, Table<WithinRepStatRecord> aliased) {
        this(alias, aliased, null);
    }

    private WithinRepStat(Name alias, Table<WithinRepStatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>JSL_DB.WITHIN_REP_STAT</code> table reference
     */
    public WithinRepStat(String alias) {
        this(DSL.name(alias), WITHIN_REP_STAT);
    }

    /**
     * Create an aliased <code>JSL_DB.WITHIN_REP_STAT</code> table reference
     */
    public WithinRepStat(Name alias) {
        this(alias, WITHIN_REP_STAT);
    }

    /**
     * Create a <code>JSL_DB.WITHIN_REP_STAT</code> table reference
     */
    public WithinRepStat() {
        this(DSL.name("WITHIN_REP_STAT"), null);
    }

    public <O extends Record> WithinRepStat(Table<O> child, ForeignKey<O, WithinRepStatRecord> key) {
        super(child, key, WITHIN_REP_STAT);
    }

    @Override
    public Schema getSchema() {
        return JslDb.JSL_DB;
    }

    @Override
    public Identity<WithinRepStatRecord, Integer> getIdentity() {
        return (Identity<WithinRepStatRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WithinRepStatRecord> getPrimaryKey() {
        return Keys.SQL0000000089_62A30128_0179_91C9_A2FA_00000F317028;
    }

    @Override
    public List<UniqueKey<WithinRepStatRecord>> getKeys() {
        return Arrays.<UniqueKey<WithinRepStatRecord>>asList(Keys.SQL0000000089_62A30128_0179_91C9_A2FA_00000F317028, Keys.WRS_UNIQUE_ELEMENT_SIMRUN_REPNUM);
    }

    @Override
    public List<ForeignKey<WithinRepStatRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WithinRepStatRecord, ?>>asList(Keys.WRS_MODEL_ELEMENT_FK, Keys.WRS_SIMRUN_FK);
    }

    private transient ModelElement _modelElement;
    private transient SimulationRun _simulationRun;

    public ModelElement modelElement() {
        if (_modelElement == null)
            _modelElement = new ModelElement(this, Keys.WRS_MODEL_ELEMENT_FK);

        return _modelElement;
    }

    public SimulationRun simulationRun() {
        if (_simulationRun == null)
            _simulationRun = new SimulationRun(this, Keys.WRS_SIMRUN_FK);

        return _simulationRun;
    }

    @Override
    public List<Check<WithinRepStatRecord>> getChecks() {
        return Arrays.<Check<WithinRepStatRecord>>asList(
              Internal.createCheck(this, DSL.name("SQL0000000090-2aed0129-0179-91c9-a2fa-00000f317028"), "(REP_NUM >=1)", true)
            , Internal.createCheck(this, DSL.name("SQL0000000091-7337412a-0179-91c9-a2fa-00000f317028"), "(STAT_COUNT >=0)", true)
        );
    }

    @Override
    public WithinRepStat as(String alias) {
        return new WithinRepStat(DSL.name(alias), this);
    }

    @Override
    public WithinRepStat as(Name alias) {
        return new WithinRepStat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WithinRepStat rename(String name) {
        return new WithinRepStat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WithinRepStat rename(Name name) {
        return new WithinRepStat(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, Integer, Integer, String, Double, Double, Double, Double, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
