/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables;


import jslx.dbutilities.jsldbsrc.JslDb;
import jslx.dbutilities.jsldbsrc.tables.records.PwDiffWithinRepViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PwDiffWithinRepView extends TableImpl<PwDiffWithinRepViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW</code>
     */
    public static final PwDiffWithinRepView PW_DIFF_WITHIN_REP_VIEW = new PwDiffWithinRepView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PwDiffWithinRepViewRecord> getRecordType() {
        return PwDiffWithinRepViewRecord.class;
    }

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.SIM_NAME</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, String> SIM_NAME = createField(DSL.name("SIM_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_SIM_NUM</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, Integer> A_SIM_NUM = createField(DSL.name("A_SIM_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.STAT_NAME</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, String> STAT_NAME = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_EXP_NAME</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, String> A_EXP_NAME = createField(DSL.name("A_EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.REP_NUM</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, Integer> REP_NUM = createField(DSL.name("REP_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_VALUE</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, Double> A_VALUE = createField(DSL.name("A_VALUE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.B_SIM_NUM</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, Integer> B_SIM_NUM = createField(DSL.name("B_SIM_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.B_EXP_NAME</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, String> B_EXP_NAME = createField(DSL.name("B_EXP_NAME"), SQLDataType.VARCHAR(510).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.B_VALUE</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, Double> B_VALUE = createField(DSL.name("B_VALUE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.DIFF_NAME</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, String> DIFF_NAME = createField(DSL.name("DIFF_NAME"), SQLDataType.VARCHAR(1025).nullable(false), this, "");

    /**
     * The column <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW.A_MINUS_B</code>.
     */
    public final TableField<PwDiffWithinRepViewRecord, Double> A_MINUS_B = createField(DSL.name("A_MINUS_B"), SQLDataType.DOUBLE, this, "");

    private PwDiffWithinRepView(Name alias, Table<PwDiffWithinRepViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private PwDiffWithinRepView(Name alias, Table<PwDiffWithinRepViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view JSL_DB.PW_DIFF_WITHIN_REP_VIEW as (select JSL_DB.SIMULATION_RUN.SIM_NAME, A.SIM_RUN_ID_FK AS A_SIM_NUM, A.STAT_NAME, A.EXP_NAME as A_EXP_NAME, A.REP_NUM, A.VALUE as A_VALUE, B.SIM_RUN_ID_FK as B_SIM_NUM, B.EXP_NAME as B_EXP_NAME, B.VALUE as B_VALUE, '(' || A.EXP_NAME || ' - ' || B.EXP_NAME || ')' as DIFF_NAME, (A.VALUE - B.VALUE) as A_MINUS_B from JSL_DB.WITHIN_REP_VIEW as A, JSL_DB.WITHIN_REP_VIEW as B, JSL_DB.SIMULATION_RUN where A.SIM_RUN_ID_FK = JSL_DB.SIMULATION_RUN.ID and A.STAT_NAME = B.STAT_NAME and A.REP_NUM = B.REP_NUM and A.SIM_RUN_ID_FK > B.SIM_RUN_ID_FK)"));
    }

    /**
     * Create an aliased <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW</code> table reference
     */
    public PwDiffWithinRepView(String alias) {
        this(DSL.name(alias), PW_DIFF_WITHIN_REP_VIEW);
    }

    /**
     * Create an aliased <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW</code> table reference
     */
    public PwDiffWithinRepView(Name alias) {
        this(alias, PW_DIFF_WITHIN_REP_VIEW);
    }

    /**
     * Create a <code>JSL_DB.PW_DIFF_WITHIN_REP_VIEW</code> table reference
     */
    public PwDiffWithinRepView() {
        this(DSL.name("PW_DIFF_WITHIN_REP_VIEW"), null);
    }

    public <O extends Record> PwDiffWithinRepView(Table<O> child, ForeignKey<O, PwDiffWithinRepViewRecord> key) {
        super(child, key, PW_DIFF_WITHIN_REP_VIEW);
    }

    @Override
    public Schema getSchema() {
        return JslDb.JSL_DB;
    }

    @Override
    public PwDiffWithinRepView as(String alias) {
        return new PwDiffWithinRepView(DSL.name(alias), this);
    }

    @Override
    public PwDiffWithinRepView as(Name alias) {
        return new PwDiffWithinRepView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PwDiffWithinRepView rename(String name) {
        return new PwDiffWithinRepView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PwDiffWithinRepView rename(Name name) {
        return new PwDiffWithinRepView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Integer, String, String, Integer, Double, Integer, String, Double, String, Double> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
