/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables.records;


import jslx.dbutilities.jsldbsrc.tables.BatchStatView;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchStatViewRecord extends TableRecordImpl<BatchStatViewRecord> implements Record6<Integer, String, String, Double, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>JSL_DB.BATCH_STAT_VIEW.SIM_RUN_ID_FK</code>.
     */
    public void setSimRunIdFk(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>JSL_DB.BATCH_STAT_VIEW.SIM_RUN_ID_FK</code>.
     */
    public Integer getSimRunIdFk() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>JSL_DB.BATCH_STAT_VIEW.EXP_NAME</code>.
     */
    public void setExpName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>JSL_DB.BATCH_STAT_VIEW.EXP_NAME</code>.
     */
    public String getExpName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>JSL_DB.BATCH_STAT_VIEW.STAT_NAME</code>.
     */
    public void setStatName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>JSL_DB.BATCH_STAT_VIEW.STAT_NAME</code>.
     */
    public String getStatName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>JSL_DB.BATCH_STAT_VIEW.STAT_COUNT</code>.
     */
    public void setStatCount(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>JSL_DB.BATCH_STAT_VIEW.STAT_COUNT</code>.
     */
    public Double getStatCount() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>JSL_DB.BATCH_STAT_VIEW.AVERAGE</code>.
     */
    public void setAverage(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>JSL_DB.BATCH_STAT_VIEW.AVERAGE</code>.
     */
    public Double getAverage() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>JSL_DB.BATCH_STAT_VIEW.STD_DEV</code>.
     */
    public void setStdDev(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>JSL_DB.BATCH_STAT_VIEW.STD_DEV</code>.
     */
    public Double getStdDev() {
        return (Double) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Double, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, String, Double, Double, Double> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return BatchStatView.BATCH_STAT_VIEW.SIM_RUN_ID_FK;
    }

    @Override
    public Field<String> field2() {
        return BatchStatView.BATCH_STAT_VIEW.EXP_NAME;
    }

    @Override
    public Field<String> field3() {
        return BatchStatView.BATCH_STAT_VIEW.STAT_NAME;
    }

    @Override
    public Field<Double> field4() {
        return BatchStatView.BATCH_STAT_VIEW.STAT_COUNT;
    }

    @Override
    public Field<Double> field5() {
        return BatchStatView.BATCH_STAT_VIEW.AVERAGE;
    }

    @Override
    public Field<Double> field6() {
        return BatchStatView.BATCH_STAT_VIEW.STD_DEV;
    }

    @Override
    public Integer component1() {
        return getSimRunIdFk();
    }

    @Override
    public String component2() {
        return getExpName();
    }

    @Override
    public String component3() {
        return getStatName();
    }

    @Override
    public Double component4() {
        return getStatCount();
    }

    @Override
    public Double component5() {
        return getAverage();
    }

    @Override
    public Double component6() {
        return getStdDev();
    }

    @Override
    public Integer value1() {
        return getSimRunIdFk();
    }

    @Override
    public String value2() {
        return getExpName();
    }

    @Override
    public String value3() {
        return getStatName();
    }

    @Override
    public Double value4() {
        return getStatCount();
    }

    @Override
    public Double value5() {
        return getAverage();
    }

    @Override
    public Double value6() {
        return getStdDev();
    }

    @Override
    public BatchStatViewRecord value1(Integer value) {
        setSimRunIdFk(value);
        return this;
    }

    @Override
    public BatchStatViewRecord value2(String value) {
        setExpName(value);
        return this;
    }

    @Override
    public BatchStatViewRecord value3(String value) {
        setStatName(value);
        return this;
    }

    @Override
    public BatchStatViewRecord value4(Double value) {
        setStatCount(value);
        return this;
    }

    @Override
    public BatchStatViewRecord value5(Double value) {
        setAverage(value);
        return this;
    }

    @Override
    public BatchStatViewRecord value6(Double value) {
        setStdDev(value);
        return this;
    }

    @Override
    public BatchStatViewRecord values(Integer value1, String value2, String value3, Double value4, Double value5, Double value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BatchStatViewRecord
     */
    public BatchStatViewRecord() {
        super(BatchStatView.BATCH_STAT_VIEW);
    }

    /**
     * Create a detached, initialised BatchStatViewRecord
     */
    public BatchStatViewRecord(Integer simRunIdFk, String expName, String statName, Double statCount, Double average, Double stdDev) {
        super(BatchStatView.BATCH_STAT_VIEW);

        setSimRunIdFk(simRunIdFk);
        setExpName(expName);
        setStatName(statName);
        setStatCount(statCount);
        setAverage(average);
        setStdDev(stdDev);
    }
}
