/*
 * This file is generated by jOOQ.
 */
package jslx.dbutilities.jsldbsrc.tables;


import java.util.Arrays;
import java.util.List;

import jslx.dbutilities.jsldbsrc.JslDb;
import jslx.dbutilities.jsldbsrc.Keys;
import jslx.dbutilities.jsldbsrc.tables.records.BatchStatRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchStat extends TableImpl<BatchStatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JSL_DB.BATCH_STAT</code>
     */
    public static final BatchStat BATCH_STAT = new BatchStat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchStatRecord> getRecordType() {
        return BatchStatRecord.class;
    }

    /**
     * The column <code>JSL_DB.BATCH_STAT.ID</code>.
     */
    public final TableField<BatchStatRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.ELEMENT_ID_FK</code>.
     */
    public final TableField<BatchStatRecord, Integer> ELEMENT_ID_FK = createField(DSL.name("ELEMENT_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.SIM_RUN_ID_FK</code>.
     */
    public final TableField<BatchStatRecord, Integer> SIM_RUN_ID_FK = createField(DSL.name("SIM_RUN_ID_FK"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.REP_NUM</code>.
     */
    public final TableField<BatchStatRecord, Integer> REP_NUM = createField(DSL.name("REP_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.STAT_NAME</code>.
     */
    public final TableField<BatchStatRecord, String> STAT_NAME = createField(DSL.name("STAT_NAME"), SQLDataType.VARCHAR(510), this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.STAT_COUNT</code>.
     */
    public final TableField<BatchStatRecord, Double> STAT_COUNT = createField(DSL.name("STAT_COUNT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.AVERAGE</code>.
     */
    public final TableField<BatchStatRecord, Double> AVERAGE = createField(DSL.name("AVERAGE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.STD_DEV</code>.
     */
    public final TableField<BatchStatRecord, Double> STD_DEV = createField(DSL.name("STD_DEV"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.STD_ERR</code>.
     */
    public final TableField<BatchStatRecord, Double> STD_ERR = createField(DSL.name("STD_ERR"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.HALF_WIDTH</code>.
     */
    public final TableField<BatchStatRecord, Double> HALF_WIDTH = createField(DSL.name("HALF_WIDTH"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.CONF_LEVEL</code>.
     */
    public final TableField<BatchStatRecord, Double> CONF_LEVEL = createField(DSL.name("CONF_LEVEL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.MINIMUM</code>.
     */
    public final TableField<BatchStatRecord, Double> MINIMUM = createField(DSL.name("MINIMUM"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.MAXIMUM</code>.
     */
    public final TableField<BatchStatRecord, Double> MAXIMUM = createField(DSL.name("MAXIMUM"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.SUM_OF_OBS</code>.
     */
    public final TableField<BatchStatRecord, Double> SUM_OF_OBS = createField(DSL.name("SUM_OF_OBS"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.DEV_SSQ</code>.
     */
    public final TableField<BatchStatRecord, Double> DEV_SSQ = createField(DSL.name("DEV_SSQ"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.LAST_VALUE</code>.
     */
    public final TableField<BatchStatRecord, Double> LAST_VALUE = createField(DSL.name("LAST_VALUE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.KURTOSIS</code>.
     */
    public final TableField<BatchStatRecord, Double> KURTOSIS = createField(DSL.name("KURTOSIS"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.SKEWNESS</code>.
     */
    public final TableField<BatchStatRecord, Double> SKEWNESS = createField(DSL.name("SKEWNESS"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.LAG1_COV</code>.
     */
    public final TableField<BatchStatRecord, Double> LAG1_COV = createField(DSL.name("LAG1_COV"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.LAG1_CORR</code>.
     */
    public final TableField<BatchStatRecord, Double> LAG1_CORR = createField(DSL.name("LAG1_CORR"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.VON_NEUMAN_LAG1_STAT</code>.
     */
    public final TableField<BatchStatRecord, Double> VON_NEUMAN_LAG1_STAT = createField(DSL.name("VON_NEUMAN_LAG1_STAT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.NUM_MISSING_OBS</code>.
     */
    public final TableField<BatchStatRecord, Double> NUM_MISSING_OBS = createField(DSL.name("NUM_MISSING_OBS"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.MIN_BATCH_SIZE</code>.
     */
    public final TableField<BatchStatRecord, Double> MIN_BATCH_SIZE = createField(DSL.name("MIN_BATCH_SIZE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.MIN_NUM_BATCHES</code>.
     */
    public final TableField<BatchStatRecord, Double> MIN_NUM_BATCHES = createField(DSL.name("MIN_NUM_BATCHES"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.MAX_NUM_BATCHES_MULTIPLE</code>.
     */
    public final TableField<BatchStatRecord, Double> MAX_NUM_BATCHES_MULTIPLE = createField(DSL.name("MAX_NUM_BATCHES_MULTIPLE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.MAX_NUM_BATCHES</code>.
     */
    public final TableField<BatchStatRecord, Double> MAX_NUM_BATCHES = createField(DSL.name("MAX_NUM_BATCHES"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.NUM_REBATCHES</code>.
     */
    public final TableField<BatchStatRecord, Double> NUM_REBATCHES = createField(DSL.name("NUM_REBATCHES"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.CURRENT_BATCH_SIZE</code>.
     */
    public final TableField<BatchStatRecord, Double> CURRENT_BATCH_SIZE = createField(DSL.name("CURRENT_BATCH_SIZE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.AMT_UNBATCHED</code>.
     */
    public final TableField<BatchStatRecord, Double> AMT_UNBATCHED = createField(DSL.name("AMT_UNBATCHED"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>JSL_DB.BATCH_STAT.TOTAL_NUM_OBS</code>.
     */
    public final TableField<BatchStatRecord, Double> TOTAL_NUM_OBS = createField(DSL.name("TOTAL_NUM_OBS"), SQLDataType.DOUBLE, this, "");

    private BatchStat(Name alias, Table<BatchStatRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchStat(Name alias, Table<BatchStatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>JSL_DB.BATCH_STAT</code> table reference
     */
    public BatchStat(String alias) {
        this(DSL.name(alias), BATCH_STAT);
    }

    /**
     * Create an aliased <code>JSL_DB.BATCH_STAT</code> table reference
     */
    public BatchStat(Name alias) {
        this(alias, BATCH_STAT);
    }

    /**
     * Create a <code>JSL_DB.BATCH_STAT</code> table reference
     */
    public BatchStat() {
        this(DSL.name("BATCH_STAT"), null);
    }

    public <O extends Record> BatchStat(Table<O> child, ForeignKey<O, BatchStatRecord> key) {
        super(child, key, BATCH_STAT);
    }

    @Override
    public Schema getSchema() {
        return JslDb.JSL_DB;
    }

    @Override
    public Identity<BatchStatRecord, Integer> getIdentity() {
        return (Identity<BatchStatRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BatchStatRecord> getPrimaryKey() {
        return Keys.SQL0000000107_06B1817D_0179_91C9_A2FA_00000F317028;
    }

    @Override
    public List<UniqueKey<BatchStatRecord>> getKeys() {
        return Arrays.<UniqueKey<BatchStatRecord>>asList(Keys.SQL0000000107_06B1817D_0179_91C9_A2FA_00000F317028);
    }

    @Override
    public List<ForeignKey<BatchStatRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BatchStatRecord, ?>>asList(Keys.BS_MODEL_ELEMENT_FK, Keys.BS_SIMRUN_FK);
    }

    private transient ModelElement _modelElement;
    private transient SimulationRun _simulationRun;

    public ModelElement modelElement() {
        if (_modelElement == null)
            _modelElement = new ModelElement(this, Keys.BS_MODEL_ELEMENT_FK);

        return _modelElement;
    }

    public SimulationRun simulationRun() {
        if (_simulationRun == null)
            _simulationRun = new SimulationRun(this, Keys.BS_SIMRUN_FK);

        return _simulationRun;
    }

    @Override
    public List<Check<BatchStatRecord>> getChecks() {
        return Arrays.<Check<BatchStatRecord>>asList(
              Internal.createCheck(this, DSL.name("SQL0000000108-6f10c17e-0179-91c9-a2fa-00000f317028"), "(REP_NUM >=1)", true)
            , Internal.createCheck(this, DSL.name("SQL0000000109-a770417f-0179-91c9-a2fa-00000f317028"), "(STAT_COUNT >=0)", true)
            , Internal.createCheck(this, DSL.name("SQL0000000110-bfd00180-0179-91c9-a2fa-00000f317028"), "(STD_DEV >=0)", true)
            , Internal.createCheck(this, DSL.name("SQL0000000111-c8300181-0179-91c9-a2fa-00000f317028"), "(STD_ERR >=0)", true)
            , Internal.createCheck(this, DSL.name("SQL0000000112-d0904182-0179-91c9-a2fa-00000f317028"), "(HALF_WIDTH >=0)", true)
        );
    }

    @Override
    public BatchStat as(String alias) {
        return new BatchStat(DSL.name(alias), this);
    }

    @Override
    public BatchStat as(Name alias) {
        return new BatchStat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStat rename(String name) {
        return new BatchStat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStat rename(Name name) {
        return new BatchStat(name, null);
    }
}
